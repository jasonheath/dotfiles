#---------------------------------------------------------------------
# https://brew.sh/
#---------------------------------------------------------------------
if type brew &>/dev/null
then
  eval "$(/usr/local/bin/brew shellenv)"
  HOMEBREW_PREFIX="$(brew --prefix)"
fi

#---------------------------------------------------------------------
# https://github.com/scop/bash-completion
#---------------------------------------------------------------------
if [[ $OSTYPE =~ darwin.* ]]; then
  [[ -r "$HOMEBREW_PREFIX/etc/profile.d/bash_completion.sh" ]] && . "$HOMEBREW_PREFIX/etc/profile.d/bash_completion.sh"
else 
  [[ $PS1 && -f /usr/share/bash-completion/bash_completion ]] && . /usr/share/bash-completion/bash_completion
fi

#---------------------------------------------------------------------
# https://code.visualstudio.com/docs/terminal/shell-integration
#---------------------------------------------------------------------

export CDPATH=".:$HOME/Development/progress:$HOME/Development/personal"

source "$HOME/.bash/prompt"

# User configuration
# export MANPATH="/usr/local/man:$MANPATH"

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export VISUAL='vim'
  export EDITOR='vim'
else
  if [[ $OSTYPE =~ darwin.* ]]; then
    export VISUAL='mvim -f'
  else
    export VISUAL='vim'
  fi
  export EDITOR='vim'
fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

#---------------------------------------------------------------------
# aliases
#---------------------------------------------------------------------
alias rm='rm -i'
alias cp='cp -i'

alias  ls='ls   -FG'
alias   l='ls   -FG'
alias  l1='ls  -1FG'
alias  ll='ls   -FGhl'
alias  la='ls  -AFG'
alias lal='ls  -AFGhl'
alias la1='ls -1AFGh'

alias cea='chezmoi edit --apply'
#test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
alias chrome='open -a /Applications/Google\ Chrome.app'
alias firefox='open -a /Applications/Firefox.app'
alias safari='open -a /Applications/Safari.app'

#---------------------------------------------------------------------
# PATH management
#---------------------------------------------------------------------
# This path mgmt is focused on adding things to the PATH that I've wanted to
# install so here we build up a hierarchical ordering of paths and then we
# append any preexisting PATH value to that so that our preferred executables
# are found prior to things on the path before we intereceded
x="$HOME/bin"
x="${x}:/usr/local/bin:/usr/local/sbin" # homebrew (https://brew.sh/)
if [[ $OSTYPE =~ darwin.* ]]; then
  x="${x}:/Applications/Visual Studio Code.app/Contents/Resources/app/bin"
  x="${x}:/Applications/MacVim.app/Contents/bin"
fi
if [[ -n $PATH ]]; then
  x="$x:$PATH"
fi
export PATH=$x
unset x


#---------------------------------------------------------------------
# AWS [https://aws.amazon.com/]
#---------------------------------------------------------------------


#---------------------------------------------------------------------
# direnv [https://direnv.net/]
#---------------------------------------------------------------------
eval "$(direnv hook bash)"


#---------------------------------------------------------------------
# go [https://go.dev/]
#---------------------------------------------------------------------
export GOPATH=$HOME/go
mkdir -p $GOPATH
export PATH=$PATH:$GOPATH/bin

#---------------------------------------------------------------------
# habitat 
#---------------------------------------------------------------------
#source $HOME/.shell/habitat.env


#---------------------------------------------------------------------
# kubernetes [https://kubernetes.io/]
#---------------------------------------------------------------------
if [[ -d "$HOME/.krew" ]]; then
  export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
fi 


#---------------------------------------------------------------------
# nvm [https://nvm.sh]
#---------------------------------------------------------------------
if [[ -d $HOME/.nvm ]]; then
  export NVM_DIR="$HOME/.nvm"
  # shellcheck source=/Users/jaheath/.nvm/nvm.sh
  # shellcheck source=/Users/jaheath/.nvm/bash_completion
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # loads nvm
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # nvm bash_completion
fi


#---------------------------------------------------------------------
# ruby [https://www.ruby-lang.org/]
#---------------------------------------------------------------------
if [[ -d $HOME/.rbenv ]]; then
  # https://github.com/rbenv/ruby-build/wiki
  # For Ruby versions 2.xâ€“3.0:
  # export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1)"
  # Ruby 3.1 and above requires OpenSSL 3:
  export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@3)"

  eval "$(rbenv init - zsh)"
  RUBY_MANPATH="$(rbenv prefix)/share/man"
  export MANPATH="$RUBY_MANPATH:$MANPATH"
fi


#---------------------------------------------------------------------
# rust [https://www.rust-lang.org/]
#---------------------------------------------------------------------
. "$HOME/.cargo/env"
export RA_LOG="error" # the logging level for rust analyzer
export RUST_BACKTRACE="0"
#export RUST_LOG="info,manager::file_watcher=trace"

