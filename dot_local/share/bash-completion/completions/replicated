# bash completion for replicated                           -*- shell-script -*-

__replicated_debug()
{
    if [[ -n ${BASH_COMP_DEBUG_FILE:-} ]]; then
        echo "$*" >> "${BASH_COMP_DEBUG_FILE}"
    fi
}

# Homebrew on Macs have version 1.3 of bash-completion which doesn't include
# _init_completion. This is a very minimal version of that function.
__replicated_init_completion()
{
    COMPREPLY=()
    _get_comp_words_by_ref "$@" cur prev words cword
}

__replicated_index_of_word()
{
    local w word=$1
    shift
    index=0
    for w in "$@"; do
        [[ $w = "$word" ]] && return
        index=$((index+1))
    done
    index=-1
}

__replicated_contains_word()
{
    local w word=$1; shift
    for w in "$@"; do
        [[ $w = "$word" ]] && return
    done
    return 1
}

__replicated_handle_go_custom_completion()
{
    __replicated_debug "${FUNCNAME[0]}: cur is ${cur}, words[*] is ${words[*]}, #words[@] is ${#words[@]}"

    local shellCompDirectiveError=1
    local shellCompDirectiveNoSpace=2
    local shellCompDirectiveNoFileComp=4
    local shellCompDirectiveFilterFileExt=8
    local shellCompDirectiveFilterDirs=16

    local out requestComp lastParam lastChar comp directive args

    # Prepare the command to request completions for the program.
    # Calling ${words[0]} instead of directly replicated allows to handle aliases
    args=("${words[@]:1}")
    # Disable ActiveHelp which is not supported for bash completion v1
    requestComp="REPLICATED_ACTIVE_HELP=0 ${words[0]} __completeNoDesc ${args[*]}"

    lastParam=${words[$((${#words[@]}-1))]}
    lastChar=${lastParam:$((${#lastParam}-1)):1}
    __replicated_debug "${FUNCNAME[0]}: lastParam ${lastParam}, lastChar ${lastChar}"

    if [ -z "${cur}" ] && [ "${lastChar}" != "=" ]; then
        # If the last parameter is complete (there is a space following it)
        # We add an extra empty parameter so we can indicate this to the go method.
        __replicated_debug "${FUNCNAME[0]}: Adding extra empty parameter"
        requestComp="${requestComp} \"\""
    fi

    __replicated_debug "${FUNCNAME[0]}: calling ${requestComp}"
    # Use eval to handle any environment variables and such
    out=$(eval "${requestComp}" 2>/dev/null)

    # Extract the directive integer at the very end of the output following a colon (:)
    directive=${out##*:}
    # Remove the directive
    out=${out%:*}
    if [ "${directive}" = "${out}" ]; then
        # There is not directive specified
        directive=0
    fi
    __replicated_debug "${FUNCNAME[0]}: the completion directive is: ${directive}"
    __replicated_debug "${FUNCNAME[0]}: the completions are: ${out}"

    if [ $((directive & shellCompDirectiveError)) -ne 0 ]; then
        # Error code.  No completion.
        __replicated_debug "${FUNCNAME[0]}: received error from custom completion go code"
        return
    else
        if [ $((directive & shellCompDirectiveNoSpace)) -ne 0 ]; then
            if [[ $(type -t compopt) = "builtin" ]]; then
                __replicated_debug "${FUNCNAME[0]}: activating no space"
                compopt -o nospace
            fi
        fi
        if [ $((directive & shellCompDirectiveNoFileComp)) -ne 0 ]; then
            if [[ $(type -t compopt) = "builtin" ]]; then
                __replicated_debug "${FUNCNAME[0]}: activating no file completion"
                compopt +o default
            fi
        fi
    fi

    if [ $((directive & shellCompDirectiveFilterFileExt)) -ne 0 ]; then
        # File extension filtering
        local fullFilter filter filteringCmd
        # Do not use quotes around the $out variable or else newline
        # characters will be kept.
        for filter in ${out}; do
            fullFilter+="$filter|"
        done

        filteringCmd="_filedir $fullFilter"
        __replicated_debug "File filtering command: $filteringCmd"
        $filteringCmd
    elif [ $((directive & shellCompDirectiveFilterDirs)) -ne 0 ]; then
        # File completion for directories only
        local subdir
        # Use printf to strip any trailing newline
        subdir=$(printf "%s" "${out}")
        if [ -n "$subdir" ]; then
            __replicated_debug "Listing directories in $subdir"
            __replicated_handle_subdirs_in_dir_flag "$subdir"
        else
            __replicated_debug "Listing directories in ."
            _filedir -d
        fi
    else
        while IFS='' read -r comp; do
            COMPREPLY+=("$comp")
        done < <(compgen -W "${out}" -- "$cur")
    fi
}

__replicated_handle_reply()
{
    __replicated_debug "${FUNCNAME[0]}"
    local comp
    case $cur in
        -*)
            if [[ $(type -t compopt) = "builtin" ]]; then
                compopt -o nospace
            fi
            local allflags
            if [ ${#must_have_one_flag[@]} -ne 0 ]; then
                allflags=("${must_have_one_flag[@]}")
            else
                allflags=("${flags[*]} ${two_word_flags[*]}")
            fi
            while IFS='' read -r comp; do
                COMPREPLY+=("$comp")
            done < <(compgen -W "${allflags[*]}" -- "$cur")
            if [[ $(type -t compopt) = "builtin" ]]; then
                [[ "${COMPREPLY[0]}" == *= ]] || compopt +o nospace
            fi

            # complete after --flag=abc
            if [[ $cur == *=* ]]; then
                if [[ $(type -t compopt) = "builtin" ]]; then
                    compopt +o nospace
                fi

                local index flag
                flag="${cur%=*}"
                __replicated_index_of_word "${flag}" "${flags_with_completion[@]}"
                COMPREPLY=()
                if [[ ${index} -ge 0 ]]; then
                    PREFIX=""
                    cur="${cur#*=}"
                    ${flags_completion[${index}]}
                    if [ -n "${ZSH_VERSION:-}" ]; then
                        # zsh completion needs --flag= prefix
                        eval "COMPREPLY=( \"\${COMPREPLY[@]/#/${flag}=}\" )"
                    fi
                fi
            fi

            if [[ -z "${flag_parsing_disabled}" ]]; then
                # If flag parsing is enabled, we have completed the flags and can return.
                # If flag parsing is disabled, we may not know all (or any) of the flags, so we fallthrough
                # to possibly call handle_go_custom_completion.
                return 0;
            fi
            ;;
    esac

    # check if we are handling a flag with special work handling
    local index
    __replicated_index_of_word "${prev}" "${flags_with_completion[@]}"
    if [[ ${index} -ge 0 ]]; then
        ${flags_completion[${index}]}
        return
    fi

    # we are parsing a flag and don't have a special handler, no completion
    if [[ ${cur} != "${words[cword]}" ]]; then
        return
    fi

    local completions
    completions=("${commands[@]}")
    if [[ ${#must_have_one_noun[@]} -ne 0 ]]; then
        completions+=("${must_have_one_noun[@]}")
    elif [[ -n "${has_completion_function}" ]]; then
        # if a go completion function is provided, defer to that function
        __replicated_handle_go_custom_completion
    fi
    if [[ ${#must_have_one_flag[@]} -ne 0 ]]; then
        completions+=("${must_have_one_flag[@]}")
    fi
    while IFS='' read -r comp; do
        COMPREPLY+=("$comp")
    done < <(compgen -W "${completions[*]}" -- "$cur")

    if [[ ${#COMPREPLY[@]} -eq 0 && ${#noun_aliases[@]} -gt 0 && ${#must_have_one_noun[@]} -ne 0 ]]; then
        while IFS='' read -r comp; do
            COMPREPLY+=("$comp")
        done < <(compgen -W "${noun_aliases[*]}" -- "$cur")
    fi

    if [[ ${#COMPREPLY[@]} -eq 0 ]]; then
        if declare -F __replicated_custom_func >/dev/null; then
            # try command name qualified custom func
            __replicated_custom_func
        else
            # otherwise fall back to unqualified for compatibility
            declare -F __custom_func >/dev/null && __custom_func
        fi
    fi

    # available in bash-completion >= 2, not always present on macOS
    if declare -F __ltrim_colon_completions >/dev/null; then
        __ltrim_colon_completions "$cur"
    fi

    # If there is only 1 completion and it is a flag with an = it will be completed
    # but we don't want a space after the =
    if [[ "${#COMPREPLY[@]}" -eq "1" ]] && [[ $(type -t compopt) = "builtin" ]] && [[ "${COMPREPLY[0]}" == --*= ]]; then
       compopt -o nospace
    fi
}

# The arguments should be in the form "ext1|ext2|extn"
__replicated_handle_filename_extension_flag()
{
    local ext="$1"
    _filedir "@(${ext})"
}

__replicated_handle_subdirs_in_dir_flag()
{
    local dir="$1"
    pushd "${dir}" >/dev/null 2>&1 && _filedir -d && popd >/dev/null 2>&1 || return
}

__replicated_handle_flag()
{
    __replicated_debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"

    # if a command required a flag, and we found it, unset must_have_one_flag()
    local flagname=${words[c]}
    local flagvalue=""
    # if the word contained an =
    if [[ ${words[c]} == *"="* ]]; then
        flagvalue=${flagname#*=} # take in as flagvalue after the =
        flagname=${flagname%=*} # strip everything after the =
        flagname="${flagname}=" # but put the = back
    fi
    __replicated_debug "${FUNCNAME[0]}: looking for ${flagname}"
    if __replicated_contains_word "${flagname}" "${must_have_one_flag[@]}"; then
        must_have_one_flag=()
    fi

    # if you set a flag which only applies to this command, don't show subcommands
    if __replicated_contains_word "${flagname}" "${local_nonpersistent_flags[@]}"; then
      commands=()
    fi

    # keep flag value with flagname as flaghash
    # flaghash variable is an associative array which is only supported in bash > 3.
    if [[ -z "${BASH_VERSION:-}" || "${BASH_VERSINFO[0]:-}" -gt 3 ]]; then
        if [ -n "${flagvalue}" ] ; then
            flaghash[${flagname}]=${flagvalue}
        elif [ -n "${words[ $((c+1)) ]}" ] ; then
            flaghash[${flagname}]=${words[ $((c+1)) ]}
        else
            flaghash[${flagname}]="true" # pad "true" for bool flag
        fi
    fi

    # skip the argument to a two word flag
    if [[ ${words[c]} != *"="* ]] && __replicated_contains_word "${words[c]}" "${two_word_flags[@]}"; then
        __replicated_debug "${FUNCNAME[0]}: found a flag ${words[c]}, skip the next argument"
        c=$((c+1))
        # if we are looking for a flags value, don't show commands
        if [[ $c -eq $cword ]]; then
            commands=()
        fi
    fi

    c=$((c+1))

}

__replicated_handle_noun()
{
    __replicated_debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"

    if __replicated_contains_word "${words[c]}" "${must_have_one_noun[@]}"; then
        must_have_one_noun=()
    elif __replicated_contains_word "${words[c]}" "${noun_aliases[@]}"; then
        must_have_one_noun=()
    fi

    nouns+=("${words[c]}")
    c=$((c+1))
}

__replicated_handle_command()
{
    __replicated_debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"

    local next_command
    if [[ -n ${last_command} ]]; then
        next_command="_${last_command}_${words[c]//:/__}"
    else
        if [[ $c -eq 0 ]]; then
            next_command="_replicated_root_command"
        else
            next_command="_${words[c]//:/__}"
        fi
    fi
    c=$((c+1))
    __replicated_debug "${FUNCNAME[0]}: looking for ${next_command}"
    declare -F "$next_command" >/dev/null && $next_command
}

__replicated_handle_word()
{
    if [[ $c -ge $cword ]]; then
        __replicated_handle_reply
        return
    fi
    __replicated_debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"
    if [[ "${words[c]}" == -* ]]; then
        __replicated_handle_flag
    elif __replicated_contains_word "${words[c]}" "${commands[@]}"; then
        __replicated_handle_command
    elif [[ $c -eq 0 ]]; then
        __replicated_handle_command
    elif __replicated_contains_word "${words[c]}" "${command_aliases[@]}"; then
        # aliashash variable is an associative array which is only supported in bash > 3.
        if [[ -z "${BASH_VERSION:-}" || "${BASH_VERSINFO[0]:-}" -gt 3 ]]; then
            words[c]=${aliashash[${words[c]}]}
            __replicated_handle_command
        else
            __replicated_handle_noun
        fi
    else
        __replicated_handle_noun
    fi
    __replicated_handle_word
}

_replicated_api_get()
{
    last_command="replicated_api_get"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_api_post()
{
    last_command="replicated_api_post"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--body=")
    two_word_flags+=("--body")
    two_word_flags+=("-b")
    local_nonpersistent_flags+=("--body")
    local_nonpersistent_flags+=("--body=")
    local_nonpersistent_flags+=("-b")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_api_put()
{
    last_command="replicated_api_put"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--body=")
    two_word_flags+=("--body")
    two_word_flags+=("-b")
    local_nonpersistent_flags+=("--body")
    local_nonpersistent_flags+=("--body=")
    local_nonpersistent_flags+=("-b")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_api()
{
    last_command="replicated_api"

    command_aliases=()

    commands=()
    commands+=("get")
    commands+=("post")
    commands+=("put")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_app_create()
{
    last_command="replicated_app_create"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_app_delete()
{
    last_command="replicated_app_delete"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--force")
    flags+=("-f")
    local_nonpersistent_flags+=("--force")
    local_nonpersistent_flags+=("-f")
    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_app_ls()
{
    last_command="replicated_app_ls"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_app()
{
    last_command="replicated_app"

    command_aliases=()

    commands=()
    commands+=("create")
    commands+=("delete")
    commands+=("ls")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_channel_inspect()
{
    last_command="replicated_channel_inspect"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_channel_ls()
{
    last_command="replicated_channel_ls"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_channel_rm()
{
    last_command="replicated_channel_rm"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_channel()
{
    last_command="replicated_channel"

    command_aliases=()

    commands=()
    commands+=("inspect")
    commands+=("ls")
    commands+=("rm")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_cluster_create()
{
    last_command="replicated_cluster_create"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--disk=")
    two_word_flags+=("--disk")
    local_nonpersistent_flags+=("--disk")
    local_nonpersistent_flags+=("--disk=")
    flags+=("--distribution=")
    two_word_flags+=("--distribution")
    local_nonpersistent_flags+=("--distribution")
    local_nonpersistent_flags+=("--distribution=")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--instance-type=")
    two_word_flags+=("--instance-type")
    local_nonpersistent_flags+=("--instance-type")
    local_nonpersistent_flags+=("--instance-type=")
    flags+=("--license-id=")
    two_word_flags+=("--license-id")
    local_nonpersistent_flags+=("--license-id")
    local_nonpersistent_flags+=("--license-id=")
    flags+=("--max-nodes=")
    two_word_flags+=("--max-nodes")
    local_nonpersistent_flags+=("--max-nodes")
    local_nonpersistent_flags+=("--max-nodes=")
    flags+=("--min-nodes=")
    two_word_flags+=("--min-nodes")
    local_nonpersistent_flags+=("--min-nodes")
    local_nonpersistent_flags+=("--min-nodes=")
    flags+=("--name=")
    two_word_flags+=("--name")
    local_nonpersistent_flags+=("--name")
    local_nonpersistent_flags+=("--name=")
    flags+=("--nodegroup=")
    two_word_flags+=("--nodegroup")
    local_nonpersistent_flags+=("--nodegroup")
    local_nonpersistent_flags+=("--nodegroup=")
    flags+=("--nodes=")
    two_word_flags+=("--nodes")
    local_nonpersistent_flags+=("--nodes")
    local_nonpersistent_flags+=("--nodes=")
    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--tag=")
    two_word_flags+=("--tag")
    local_nonpersistent_flags+=("--tag")
    local_nonpersistent_flags+=("--tag=")
    flags+=("--ttl=")
    two_word_flags+=("--ttl")
    local_nonpersistent_flags+=("--ttl")
    local_nonpersistent_flags+=("--ttl=")
    flags+=("--version=")
    two_word_flags+=("--version")
    local_nonpersistent_flags+=("--version")
    local_nonpersistent_flags+=("--version=")
    flags+=("--wait=")
    two_word_flags+=("--wait")
    local_nonpersistent_flags+=("--wait")
    local_nonpersistent_flags+=("--wait=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_flag+=("--distribution=")
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_cluster_kubeconfig()
{
    last_command="replicated_cluster_kubeconfig"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--id=")
    two_word_flags+=("--id")
    local_nonpersistent_flags+=("--id")
    local_nonpersistent_flags+=("--id=")
    flags+=("--name=")
    two_word_flags+=("--name")
    local_nonpersistent_flags+=("--name")
    local_nonpersistent_flags+=("--name=")
    flags+=("--output-path=")
    two_word_flags+=("--output-path")
    local_nonpersistent_flags+=("--output-path")
    local_nonpersistent_flags+=("--output-path=")
    flags+=("--stdout")
    local_nonpersistent_flags+=("--stdout")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_cluster_ls()
{
    last_command="replicated_cluster_ls"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--end-time=")
    two_word_flags+=("--end-time")
    local_nonpersistent_flags+=("--end-time")
    local_nonpersistent_flags+=("--end-time=")
    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--show-terminated")
    local_nonpersistent_flags+=("--show-terminated")
    flags+=("--start-time=")
    two_word_flags+=("--start-time")
    local_nonpersistent_flags+=("--start-time")
    local_nonpersistent_flags+=("--start-time=")
    flags+=("--watch")
    flags+=("-w")
    local_nonpersistent_flags+=("--watch")
    local_nonpersistent_flags+=("-w")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_cluster_nodegroup_ls()
{
    last_command="replicated_cluster_nodegroup_ls"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_cluster_nodegroup()
{
    last_command="replicated_cluster_nodegroup"

    command_aliases=()

    commands=()
    commands+=("ls")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_cluster_prepare()
{
    last_command="replicated_cluster_prepare"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--app-ready-timeout=")
    two_word_flags+=("--app-ready-timeout")
    local_nonpersistent_flags+=("--app-ready-timeout")
    local_nonpersistent_flags+=("--app-ready-timeout=")
    flags+=("--chart=")
    two_word_flags+=("--chart")
    local_nonpersistent_flags+=("--chart")
    local_nonpersistent_flags+=("--chart=")
    flags+=("--cluster-id=")
    two_word_flags+=("--cluster-id")
    local_nonpersistent_flags+=("--cluster-id")
    local_nonpersistent_flags+=("--cluster-id=")
    flags+=("--config-values-file=")
    two_word_flags+=("--config-values-file")
    local_nonpersistent_flags+=("--config-values-file")
    local_nonpersistent_flags+=("--config-values-file=")
    flags+=("--disk=")
    two_word_flags+=("--disk")
    local_nonpersistent_flags+=("--disk")
    local_nonpersistent_flags+=("--disk=")
    flags+=("--distribution=")
    two_word_flags+=("--distribution")
    local_nonpersistent_flags+=("--distribution")
    local_nonpersistent_flags+=("--distribution=")
    flags+=("--entitlements=")
    two_word_flags+=("--entitlements")
    local_nonpersistent_flags+=("--entitlements")
    local_nonpersistent_flags+=("--entitlements=")
    flags+=("--instance-type=")
    two_word_flags+=("--instance-type")
    local_nonpersistent_flags+=("--instance-type")
    local_nonpersistent_flags+=("--instance-type=")
    flags+=("--name=")
    two_word_flags+=("--name")
    local_nonpersistent_flags+=("--name")
    local_nonpersistent_flags+=("--name=")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    local_nonpersistent_flags+=("--namespace")
    local_nonpersistent_flags+=("--namespace=")
    flags+=("--node-count=")
    two_word_flags+=("--node-count")
    local_nonpersistent_flags+=("--node-count")
    local_nonpersistent_flags+=("--node-count=")
    flags+=("--set=")
    two_word_flags+=("--set")
    local_nonpersistent_flags+=("--set")
    local_nonpersistent_flags+=("--set=")
    flags+=("--set-file=")
    two_word_flags+=("--set-file")
    local_nonpersistent_flags+=("--set-file")
    local_nonpersistent_flags+=("--set-file=")
    flags+=("--set-json=")
    two_word_flags+=("--set-json")
    local_nonpersistent_flags+=("--set-json")
    local_nonpersistent_flags+=("--set-json=")
    flags+=("--set-literal=")
    two_word_flags+=("--set-literal")
    local_nonpersistent_flags+=("--set-literal")
    local_nonpersistent_flags+=("--set-literal=")
    flags+=("--set-string=")
    two_word_flags+=("--set-string")
    local_nonpersistent_flags+=("--set-string")
    local_nonpersistent_flags+=("--set-string=")
    flags+=("--shared-password=")
    two_word_flags+=("--shared-password")
    local_nonpersistent_flags+=("--shared-password")
    local_nonpersistent_flags+=("--shared-password=")
    flags+=("--ttl=")
    two_word_flags+=("--ttl")
    local_nonpersistent_flags+=("--ttl")
    local_nonpersistent_flags+=("--ttl=")
    flags+=("--values=")
    two_word_flags+=("--values")
    local_nonpersistent_flags+=("--values")
    local_nonpersistent_flags+=("--values=")
    flags+=("--version=")
    two_word_flags+=("--version")
    local_nonpersistent_flags+=("--version")
    local_nonpersistent_flags+=("--version=")
    flags+=("--wait=")
    two_word_flags+=("--wait")
    local_nonpersistent_flags+=("--wait")
    local_nonpersistent_flags+=("--wait=")
    flags+=("--yaml=")
    two_word_flags+=("--yaml")
    local_nonpersistent_flags+=("--yaml")
    local_nonpersistent_flags+=("--yaml=")
    flags+=("--yaml-dir=")
    two_word_flags+=("--yaml-dir")
    local_nonpersistent_flags+=("--yaml-dir")
    local_nonpersistent_flags+=("--yaml-dir=")
    flags+=("--yaml-file=")
    two_word_flags+=("--yaml-file")
    local_nonpersistent_flags+=("--yaml-file")
    local_nonpersistent_flags+=("--yaml-file=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_flag+=("--distribution=")
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_cluster_rm()
{
    last_command="replicated_cluster_rm"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all")
    local_nonpersistent_flags+=("--all")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--name=")
    two_word_flags+=("--name")
    local_nonpersistent_flags+=("--name")
    local_nonpersistent_flags+=("--name=")
    flags+=("--tag=")
    two_word_flags+=("--tag")
    local_nonpersistent_flags+=("--tag")
    local_nonpersistent_flags+=("--tag=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_cluster_shell()
{
    last_command="replicated_cluster_shell"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--id=")
    two_word_flags+=("--id")
    local_nonpersistent_flags+=("--id")
    local_nonpersistent_flags+=("--id=")
    flags+=("--name=")
    two_word_flags+=("--name")
    local_nonpersistent_flags+=("--name")
    local_nonpersistent_flags+=("--name=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_cluster_update_ttl()
{
    last_command="replicated_cluster_update_ttl"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--ttl=")
    two_word_flags+=("--ttl")
    local_nonpersistent_flags+=("--ttl")
    local_nonpersistent_flags+=("--ttl=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_flag+=("--ttl=")
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_cluster_update()
{
    last_command="replicated_cluster_update"

    command_aliases=()

    commands=()
    commands+=("ttl")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_cluster_upgrade()
{
    last_command="replicated_cluster_upgrade"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--version=")
    two_word_flags+=("--version")
    local_nonpersistent_flags+=("--version")
    local_nonpersistent_flags+=("--version=")
    flags+=("--wait=")
    two_word_flags+=("--wait")
    local_nonpersistent_flags+=("--wait")
    local_nonpersistent_flags+=("--wait=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_flag+=("--version=")
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_cluster_versions()
{
    last_command="replicated_cluster_versions"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--distribution=")
    two_word_flags+=("--distribution")
    local_nonpersistent_flags+=("--distribution")
    local_nonpersistent_flags+=("--distribution=")
    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_cluster()
{
    last_command="replicated_cluster"

    command_aliases=()

    commands=()
    commands+=("create")
    commands+=("kubeconfig")
    commands+=("ls")
    commands+=("nodegroup")
    commands+=("prepare")
    commands+=("rm")
    commands+=("shell")
    commands+=("update")
    commands+=("upgrade")
    commands+=("versions")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_completion()
{
    last_command="replicated_completion"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--help")
    flags+=("-h")
    local_nonpersistent_flags+=("--help")
    local_nonpersistent_flags+=("-h")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    must_have_one_noun+=("bash")
    must_have_one_noun+=("fish")
    must_have_one_noun+=("powershell")
    must_have_one_noun+=("zsh")
    noun_aliases=()
}

_replicated_customer_archive()
{
    last_command="replicated_customer_archive"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--customer=")
    two_word_flags+=("--customer")
    local_nonpersistent_flags+=("--customer")
    local_nonpersistent_flags+=("--customer=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_customer_create()
{
    last_command="replicated_customer_create"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--airgap")
    local_nonpersistent_flags+=("--airgap")
    flags+=("--channel=")
    two_word_flags+=("--channel")
    local_nonpersistent_flags+=("--channel")
    local_nonpersistent_flags+=("--channel=")
    flags+=("--custom-id=")
    two_word_flags+=("--custom-id")
    local_nonpersistent_flags+=("--custom-id")
    local_nonpersistent_flags+=("--custom-id=")
    flags+=("--email=")
    two_word_flags+=("--email")
    local_nonpersistent_flags+=("--email")
    local_nonpersistent_flags+=("--email=")
    flags+=("--ensure-channel")
    local_nonpersistent_flags+=("--ensure-channel")
    flags+=("--expires-in=")
    two_word_flags+=("--expires-in")
    local_nonpersistent_flags+=("--expires-in")
    local_nonpersistent_flags+=("--expires-in=")
    flags+=("--gitops")
    local_nonpersistent_flags+=("--gitops")
    flags+=("--kots-install")
    local_nonpersistent_flags+=("--kots-install")
    flags+=("--name=")
    two_word_flags+=("--name")
    local_nonpersistent_flags+=("--name")
    local_nonpersistent_flags+=("--name=")
    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--snapshot")
    local_nonpersistent_flags+=("--snapshot")
    flags+=("--type=")
    two_word_flags+=("--type")
    local_nonpersistent_flags+=("--type")
    local_nonpersistent_flags+=("--type=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_customer_download-license()
{
    last_command="replicated_customer_download-license"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--customer=")
    two_word_flags+=("--customer")
    local_nonpersistent_flags+=("--customer")
    local_nonpersistent_flags+=("--customer=")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_customer_inspect()
{
    last_command="replicated_customer_inspect"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--customer=")
    two_word_flags+=("--customer")
    local_nonpersistent_flags+=("--customer")
    local_nonpersistent_flags+=("--customer=")
    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_customer_ls()
{
    last_command="replicated_customer_ls"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--app-version=")
    two_word_flags+=("--app-version")
    local_nonpersistent_flags+=("--app-version")
    local_nonpersistent_flags+=("--app-version=")
    flags+=("--include-test")
    local_nonpersistent_flags+=("--include-test")
    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_customer()
{
    last_command="replicated_customer"

    command_aliases=()

    commands=()
    commands+=("archive")
    commands+=("create")
    commands+=("download-license")
    commands+=("inspect")
    commands+=("ls")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_enterprise_auth_approve()
{
    last_command="replicated_enterprise_auth_approve"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--fingerprint=")
    two_word_flags+=("--fingerprint")
    local_nonpersistent_flags+=("--fingerprint")
    local_nonpersistent_flags+=("--fingerprint=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--private-key=")
    two_word_flags+=("--private-key")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_enterprise_auth_init()
{
    last_command="replicated_enterprise_auth_init"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--create-org=")
    two_word_flags+=("--create-org")
    local_nonpersistent_flags+=("--create-org")
    local_nonpersistent_flags+=("--create-org=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--private-key=")
    two_word_flags+=("--private-key")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_enterprise_auth()
{
    last_command="replicated_enterprise_auth"

    command_aliases=()

    commands=()
    commands+=("approve")
    commands+=("init")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--private-key=")
    two_word_flags+=("--private-key")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_enterprise_channel_assign()
{
    last_command="replicated_enterprise_channel_assign"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--channel-id=")
    two_word_flags+=("--channel-id")
    local_nonpersistent_flags+=("--channel-id")
    local_nonpersistent_flags+=("--channel-id=")
    flags+=("--team-id=")
    two_word_flags+=("--team-id")
    local_nonpersistent_flags+=("--team-id")
    local_nonpersistent_flags+=("--team-id=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--private-key=")
    two_word_flags+=("--private-key")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_enterprise_channel_create()
{
    last_command="replicated_enterprise_channel_create"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--description=")
    two_word_flags+=("--description")
    local_nonpersistent_flags+=("--description")
    local_nonpersistent_flags+=("--description=")
    flags+=("--name=")
    two_word_flags+=("--name")
    local_nonpersistent_flags+=("--name")
    local_nonpersistent_flags+=("--name=")
    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--private-key=")
    two_word_flags+=("--private-key")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_enterprise_channel_ls()
{
    last_command="replicated_enterprise_channel_ls"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--private-key=")
    two_word_flags+=("--private-key")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_enterprise_channel_rm()
{
    last_command="replicated_enterprise_channel_rm"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--id=")
    two_word_flags+=("--id")
    local_nonpersistent_flags+=("--id")
    local_nonpersistent_flags+=("--id=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--private-key=")
    two_word_flags+=("--private-key")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_enterprise_channel_update()
{
    last_command="replicated_enterprise_channel_update"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--description=")
    two_word_flags+=("--description")
    local_nonpersistent_flags+=("--description")
    local_nonpersistent_flags+=("--description=")
    flags+=("--id=")
    two_word_flags+=("--id")
    local_nonpersistent_flags+=("--id")
    local_nonpersistent_flags+=("--id=")
    flags+=("--name=")
    two_word_flags+=("--name")
    local_nonpersistent_flags+=("--name")
    local_nonpersistent_flags+=("--name=")
    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--private-key=")
    two_word_flags+=("--private-key")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_enterprise_channel()
{
    last_command="replicated_enterprise_channel"

    command_aliases=()

    commands=()
    commands+=("assign")
    commands+=("create")
    commands+=("ls")
    commands+=("rm")
    commands+=("update")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--private-key=")
    two_word_flags+=("--private-key")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_enterprise_installer_assign()
{
    last_command="replicated_enterprise_installer_assign"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--channel-id=")
    two_word_flags+=("--channel-id")
    local_nonpersistent_flags+=("--channel-id")
    local_nonpersistent_flags+=("--channel-id=")
    flags+=("--installer-id=")
    two_word_flags+=("--installer-id")
    local_nonpersistent_flags+=("--installer-id")
    local_nonpersistent_flags+=("--installer-id=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--private-key=")
    two_word_flags+=("--private-key")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_enterprise_installer_create()
{
    last_command="replicated_enterprise_installer_create"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--yaml-file=")
    two_word_flags+=("--yaml-file")
    local_nonpersistent_flags+=("--yaml-file")
    local_nonpersistent_flags+=("--yaml-file=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--private-key=")
    two_word_flags+=("--private-key")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_enterprise_installer_ls()
{
    last_command="replicated_enterprise_installer_ls"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--private-key=")
    two_word_flags+=("--private-key")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_enterprise_installer_rm()
{
    last_command="replicated_enterprise_installer_rm"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--id=")
    two_word_flags+=("--id")
    local_nonpersistent_flags+=("--id")
    local_nonpersistent_flags+=("--id=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--private-key=")
    two_word_flags+=("--private-key")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_enterprise_installer_update()
{
    last_command="replicated_enterprise_installer_update"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--id=")
    two_word_flags+=("--id")
    local_nonpersistent_flags+=("--id")
    local_nonpersistent_flags+=("--id=")
    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--yaml-file=")
    two_word_flags+=("--yaml-file")
    local_nonpersistent_flags+=("--yaml-file")
    local_nonpersistent_flags+=("--yaml-file=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--private-key=")
    two_word_flags+=("--private-key")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_enterprise_installer()
{
    last_command="replicated_enterprise_installer"

    command_aliases=()

    commands=()
    commands+=("assign")
    commands+=("create")
    commands+=("ls")
    commands+=("rm")
    commands+=("update")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--private-key=")
    two_word_flags+=("--private-key")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_enterprise_policy_assign()
{
    last_command="replicated_enterprise_policy_assign"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--channel-id=")
    two_word_flags+=("--channel-id")
    local_nonpersistent_flags+=("--channel-id")
    local_nonpersistent_flags+=("--channel-id=")
    flags+=("--policy-id=")
    two_word_flags+=("--policy-id")
    local_nonpersistent_flags+=("--policy-id")
    local_nonpersistent_flags+=("--policy-id=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--private-key=")
    two_word_flags+=("--private-key")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_enterprise_policy_create()
{
    last_command="replicated_enterprise_policy_create"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--description=")
    two_word_flags+=("--description")
    local_nonpersistent_flags+=("--description")
    local_nonpersistent_flags+=("--description=")
    flags+=("--name=")
    two_word_flags+=("--name")
    local_nonpersistent_flags+=("--name")
    local_nonpersistent_flags+=("--name=")
    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--policy-file=")
    two_word_flags+=("--policy-file")
    local_nonpersistent_flags+=("--policy-file")
    local_nonpersistent_flags+=("--policy-file=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--private-key=")
    two_word_flags+=("--private-key")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_enterprise_policy_ls()
{
    last_command="replicated_enterprise_policy_ls"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--private-key=")
    two_word_flags+=("--private-key")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_enterprise_policy_rm()
{
    last_command="replicated_enterprise_policy_rm"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--id=")
    two_word_flags+=("--id")
    local_nonpersistent_flags+=("--id")
    local_nonpersistent_flags+=("--id=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--private-key=")
    two_word_flags+=("--private-key")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_enterprise_policy_unassign()
{
    last_command="replicated_enterprise_policy_unassign"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--channel-id=")
    two_word_flags+=("--channel-id")
    local_nonpersistent_flags+=("--channel-id")
    local_nonpersistent_flags+=("--channel-id=")
    flags+=("--policy-id=")
    two_word_flags+=("--policy-id")
    local_nonpersistent_flags+=("--policy-id")
    local_nonpersistent_flags+=("--policy-id=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--private-key=")
    two_word_flags+=("--private-key")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_enterprise_policy_update()
{
    last_command="replicated_enterprise_policy_update"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--description=")
    two_word_flags+=("--description")
    local_nonpersistent_flags+=("--description")
    local_nonpersistent_flags+=("--description=")
    flags+=("--id=")
    two_word_flags+=("--id")
    local_nonpersistent_flags+=("--id")
    local_nonpersistent_flags+=("--id=")
    flags+=("--name=")
    two_word_flags+=("--name")
    local_nonpersistent_flags+=("--name")
    local_nonpersistent_flags+=("--name=")
    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--policy-file=")
    two_word_flags+=("--policy-file")
    local_nonpersistent_flags+=("--policy-file")
    local_nonpersistent_flags+=("--policy-file=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--private-key=")
    two_word_flags+=("--private-key")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_enterprise_policy()
{
    last_command="replicated_enterprise_policy"

    command_aliases=()

    commands=()
    commands+=("assign")
    commands+=("create")
    commands+=("ls")
    commands+=("rm")
    commands+=("unassign")
    commands+=("update")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--private-key=")
    two_word_flags+=("--private-key")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_enterprise()
{
    last_command="replicated_enterprise"

    command_aliases=()

    commands=()
    commands+=("auth")
    commands+=("channel")
    commands+=("installer")
    commands+=("policy")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--private-key=")
    two_word_flags+=("--private-key")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_help()
{
    last_command="replicated_help"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_replicated_installer_create()
{
    last_command="replicated_installer_create"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--auto")
    local_nonpersistent_flags+=("--auto")
    flags+=("--confirm-auto")
    flags+=("-y")
    local_nonpersistent_flags+=("--confirm-auto")
    local_nonpersistent_flags+=("-y")
    flags+=("--ensure-channel")
    local_nonpersistent_flags+=("--ensure-channel")
    flags+=("--promote=")
    two_word_flags+=("--promote")
    local_nonpersistent_flags+=("--promote")
    local_nonpersistent_flags+=("--promote=")
    flags+=("--yaml=")
    two_word_flags+=("--yaml")
    local_nonpersistent_flags+=("--yaml")
    local_nonpersistent_flags+=("--yaml=")
    flags+=("--yaml-file=")
    two_word_flags+=("--yaml-file")
    local_nonpersistent_flags+=("--yaml-file")
    local_nonpersistent_flags+=("--yaml-file=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_installer_ls()
{
    last_command="replicated_installer_ls"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_installer()
{
    last_command="replicated_installer"

    command_aliases=()

    commands=()
    commands+=("create")
    commands+=("ls")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_instance_inspect()
{
    last_command="replicated_instance_inspect"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--customer=")
    two_word_flags+=("--customer")
    local_nonpersistent_flags+=("--customer")
    local_nonpersistent_flags+=("--customer=")
    flags+=("--instance=")
    two_word_flags+=("--instance")
    local_nonpersistent_flags+=("--instance")
    local_nonpersistent_flags+=("--instance=")
    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_instance_ls()
{
    last_command="replicated_instance_ls"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--customer=")
    two_word_flags+=("--customer")
    local_nonpersistent_flags+=("--customer")
    local_nonpersistent_flags+=("--customer=")
    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--tag=")
    two_word_flags+=("--tag")
    local_nonpersistent_flags+=("--tag")
    local_nonpersistent_flags+=("--tag=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_instance_tag()
{
    last_command="replicated_instance_tag"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--customer=")
    two_word_flags+=("--customer")
    local_nonpersistent_flags+=("--customer")
    local_nonpersistent_flags+=("--customer=")
    flags+=("--instance=")
    two_word_flags+=("--instance")
    local_nonpersistent_flags+=("--instance")
    local_nonpersistent_flags+=("--instance=")
    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--tag=")
    two_word_flags+=("--tag")
    local_nonpersistent_flags+=("--tag")
    local_nonpersistent_flags+=("--tag=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_instance()
{
    last_command="replicated_instance"

    command_aliases=()

    commands=()
    commands+=("inspect")
    commands+=("ls")
    commands+=("tag")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_login()
{
    last_command="replicated_login"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_logout()
{
    last_command="replicated_logout"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_registry_add_dockerhub()
{
    last_command="replicated_registry_add_dockerhub"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--authtype=")
    two_word_flags+=("--authtype")
    local_nonpersistent_flags+=("--authtype")
    local_nonpersistent_flags+=("--authtype=")
    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--password=")
    two_word_flags+=("--password")
    local_nonpersistent_flags+=("--password")
    local_nonpersistent_flags+=("--password=")
    flags+=("--password-stdin")
    local_nonpersistent_flags+=("--password-stdin")
    flags+=("--token=")
    two_word_flags+=("--token")
    local_nonpersistent_flags+=("--token")
    local_nonpersistent_flags+=("--token=")
    flags+=("--token-stdin")
    local_nonpersistent_flags+=("--token-stdin")
    flags+=("--username=")
    two_word_flags+=("--username")
    local_nonpersistent_flags+=("--username")
    local_nonpersistent_flags+=("--username=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--skip-validation")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_registry_add_ecr()
{
    last_command="replicated_registry_add_ecr"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--accesskeyid=")
    two_word_flags+=("--accesskeyid")
    local_nonpersistent_flags+=("--accesskeyid")
    local_nonpersistent_flags+=("--accesskeyid=")
    flags+=("--endpoint=")
    two_word_flags+=("--endpoint")
    local_nonpersistent_flags+=("--endpoint")
    local_nonpersistent_flags+=("--endpoint=")
    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--secretaccesskey=")
    two_word_flags+=("--secretaccesskey")
    local_nonpersistent_flags+=("--secretaccesskey")
    local_nonpersistent_flags+=("--secretaccesskey=")
    flags+=("--secretaccesskey-stdin")
    local_nonpersistent_flags+=("--secretaccesskey-stdin")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--skip-validation")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_registry_add_gar()
{
    last_command="replicated_registry_add_gar"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--authtype=")
    two_word_flags+=("--authtype")
    local_nonpersistent_flags+=("--authtype")
    local_nonpersistent_flags+=("--authtype=")
    flags+=("--endpoint=")
    two_word_flags+=("--endpoint")
    local_nonpersistent_flags+=("--endpoint")
    local_nonpersistent_flags+=("--endpoint=")
    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--serviceaccountkey=")
    two_word_flags+=("--serviceaccountkey")
    local_nonpersistent_flags+=("--serviceaccountkey")
    local_nonpersistent_flags+=("--serviceaccountkey=")
    flags+=("--serviceaccountkey-stdin")
    local_nonpersistent_flags+=("--serviceaccountkey-stdin")
    flags+=("--token=")
    two_word_flags+=("--token")
    local_nonpersistent_flags+=("--token")
    local_nonpersistent_flags+=("--token=")
    flags+=("--token-stdin")
    local_nonpersistent_flags+=("--token-stdin")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--skip-validation")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_registry_add_gcr()
{
    last_command="replicated_registry_add_gcr"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--endpoint=")
    two_word_flags+=("--endpoint")
    local_nonpersistent_flags+=("--endpoint")
    local_nonpersistent_flags+=("--endpoint=")
    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--serviceaccountkey=")
    two_word_flags+=("--serviceaccountkey")
    local_nonpersistent_flags+=("--serviceaccountkey")
    local_nonpersistent_flags+=("--serviceaccountkey=")
    flags+=("--serviceaccountkey-stdin")
    local_nonpersistent_flags+=("--serviceaccountkey-stdin")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--skip-validation")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_registry_add_ghcr()
{
    last_command="replicated_registry_add_ghcr"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--token=")
    two_word_flags+=("--token")
    local_nonpersistent_flags+=("--token")
    local_nonpersistent_flags+=("--token=")
    flags+=("--token-stdin")
    local_nonpersistent_flags+=("--token-stdin")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--skip-validation")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_registry_add_other()
{
    last_command="replicated_registry_add_other"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--endpoint=")
    two_word_flags+=("--endpoint")
    local_nonpersistent_flags+=("--endpoint")
    local_nonpersistent_flags+=("--endpoint=")
    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--password=")
    two_word_flags+=("--password")
    local_nonpersistent_flags+=("--password")
    local_nonpersistent_flags+=("--password=")
    flags+=("--password-stdin")
    local_nonpersistent_flags+=("--password-stdin")
    flags+=("--username=")
    two_word_flags+=("--username")
    local_nonpersistent_flags+=("--username")
    local_nonpersistent_flags+=("--username=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--skip-validation")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_registry_add_quay()
{
    last_command="replicated_registry_add_quay"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--password=")
    two_word_flags+=("--password")
    local_nonpersistent_flags+=("--password")
    local_nonpersistent_flags+=("--password=")
    flags+=("--password-stdin")
    local_nonpersistent_flags+=("--password-stdin")
    flags+=("--username=")
    two_word_flags+=("--username")
    local_nonpersistent_flags+=("--username")
    local_nonpersistent_flags+=("--username=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--skip-validation")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_registry_add()
{
    last_command="replicated_registry_add"

    command_aliases=()

    commands=()
    commands+=("dockerhub")
    commands+=("ecr")
    commands+=("gar")
    commands+=("gcr")
    commands+=("ghcr")
    commands+=("other")
    commands+=("quay")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--skip-validation")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_registry_ls()
{
    last_command="replicated_registry_ls"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_registry_rm()
{
    last_command="replicated_registry_rm"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_registry_test()
{
    last_command="replicated_registry_test"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--image=")
    two_word_flags+=("--image")
    local_nonpersistent_flags+=("--image")
    local_nonpersistent_flags+=("--image=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_flag+=("--image=")
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_registry()
{
    last_command="replicated_registry"

    command_aliases=()

    commands=()
    commands+=("add")
    commands+=("ls")
    commands+=("rm")
    commands+=("test")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_release_compatibility()
{
    last_command="replicated_release_compatibility"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--distribution=")
    two_word_flags+=("--distribution")
    local_nonpersistent_flags+=("--distribution")
    local_nonpersistent_flags+=("--distribution=")
    flags+=("--failure")
    local_nonpersistent_flags+=("--failure")
    flags+=("--notes=")
    two_word_flags+=("--notes")
    local_nonpersistent_flags+=("--notes")
    local_nonpersistent_flags+=("--notes=")
    flags+=("--success")
    local_nonpersistent_flags+=("--success")
    flags+=("--version=")
    two_word_flags+=("--version")
    local_nonpersistent_flags+=("--version")
    local_nonpersistent_flags+=("--version=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_flag+=("--distribution=")
    must_have_one_flag+=("--version=")
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_release_create()
{
    last_command="replicated_release_create"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--auto")
    local_nonpersistent_flags+=("--auto")
    flags+=("--chart=")
    two_word_flags+=("--chart")
    local_nonpersistent_flags+=("--chart")
    local_nonpersistent_flags+=("--chart=")
    flags+=("--confirm-auto")
    flags+=("-y")
    local_nonpersistent_flags+=("--confirm-auto")
    local_nonpersistent_flags+=("-y")
    flags+=("--ensure-channel")
    local_nonpersistent_flags+=("--ensure-channel")
    flags+=("--fail-on=")
    two_word_flags+=("--fail-on")
    local_nonpersistent_flags+=("--fail-on")
    local_nonpersistent_flags+=("--fail-on=")
    flags+=("--lint")
    local_nonpersistent_flags+=("--lint")
    flags+=("--promote=")
    two_word_flags+=("--promote")
    local_nonpersistent_flags+=("--promote")
    local_nonpersistent_flags+=("--promote=")
    flags+=("--release-notes=")
    two_word_flags+=("--release-notes")
    local_nonpersistent_flags+=("--release-notes")
    local_nonpersistent_flags+=("--release-notes=")
    flags+=("--version=")
    two_word_flags+=("--version")
    local_nonpersistent_flags+=("--version")
    local_nonpersistent_flags+=("--version=")
    flags+=("--yaml-dir=")
    two_word_flags+=("--yaml-dir")
    local_nonpersistent_flags+=("--yaml-dir")
    local_nonpersistent_flags+=("--yaml-dir=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_release_download()
{
    last_command="replicated_release_download"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--dest=")
    two_word_flags+=("--dest")
    two_word_flags+=("-d")
    local_nonpersistent_flags+=("--dest")
    local_nonpersistent_flags+=("--dest=")
    local_nonpersistent_flags+=("-d")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_release_lint()
{
    last_command="replicated_release_lint"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--chart=")
    two_word_flags+=("--chart")
    local_nonpersistent_flags+=("--chart")
    local_nonpersistent_flags+=("--chart=")
    flags+=("--fail-on=")
    two_word_flags+=("--fail-on")
    local_nonpersistent_flags+=("--fail-on")
    local_nonpersistent_flags+=("--fail-on=")
    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--yaml-dir=")
    two_word_flags+=("--yaml-dir")
    local_nonpersistent_flags+=("--yaml-dir")
    local_nonpersistent_flags+=("--yaml-dir=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_release_ls()
{
    last_command="replicated_release_ls"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--output=")
    two_word_flags+=("--output")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_release_promote()
{
    last_command="replicated_release_promote"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--optional")
    local_nonpersistent_flags+=("--optional")
    flags+=("--release-notes=")
    two_word_flags+=("--release-notes")
    local_nonpersistent_flags+=("--release-notes")
    local_nonpersistent_flags+=("--release-notes=")
    flags+=("--required")
    local_nonpersistent_flags+=("--required")
    flags+=("--version=")
    two_word_flags+=("--version")
    local_nonpersistent_flags+=("--version")
    local_nonpersistent_flags+=("--version=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_release_test()
{
    last_command="replicated_release_test"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_release_update()
{
    last_command="replicated_release_update"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--chart=")
    two_word_flags+=("--chart")
    local_nonpersistent_flags+=("--chart")
    local_nonpersistent_flags+=("--chart=")
    flags+=("--yaml=")
    two_word_flags+=("--yaml")
    local_nonpersistent_flags+=("--yaml")
    local_nonpersistent_flags+=("--yaml=")
    flags+=("--yaml-dir=")
    two_word_flags+=("--yaml-dir")
    local_nonpersistent_flags+=("--yaml-dir")
    local_nonpersistent_flags+=("--yaml-dir=")
    flags+=("--yaml-file=")
    two_word_flags+=("--yaml-file")
    local_nonpersistent_flags+=("--yaml-file")
    local_nonpersistent_flags+=("--yaml-file=")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_release()
{
    last_command="replicated_release"

    command_aliases=()

    commands=()
    commands+=("compatibility")
    commands+=("create")
    commands+=("download")
    commands+=("lint")
    commands+=("ls")
    commands+=("promote")
    commands+=("test")
    commands+=("update")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_version_upgrade()
{
    last_command="replicated_version_upgrade"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_version()
{
    last_command="replicated_version"

    command_aliases=()

    commands=()
    commands+=("upgrade")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--json")
    local_nonpersistent_flags+=("--json")
    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_replicated_root_command()
{
    last_command="replicated"

    command_aliases=()

    commands=()
    commands+=("api")
    commands+=("app")
    commands+=("channel")
    commands+=("cluster")
    commands+=("completion")
    commands+=("customer")
    commands+=("enterprise")
    commands+=("help")
    commands+=("installer")
    commands+=("instance")
    commands+=("login")
    commands+=("logout")
    commands+=("registry")
    commands+=("release")
    commands+=("version")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--app=")
    two_word_flags+=("--app")
    flags+=("--token=")
    two_word_flags+=("--token")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

__start_replicated()
{
    local cur prev words cword split
    declare -A flaghash 2>/dev/null || :
    declare -A aliashash 2>/dev/null || :
    if declare -F _init_completion >/dev/null 2>&1; then
        _init_completion -s || return
    else
        __replicated_init_completion -n "=" || return
    fi

    local c=0
    local flag_parsing_disabled=
    local flags=()
    local two_word_flags=()
    local local_nonpersistent_flags=()
    local flags_with_completion=()
    local flags_completion=()
    local commands=("replicated")
    local command_aliases=()
    local must_have_one_flag=()
    local must_have_one_noun=()
    local has_completion_function=""
    local last_command=""
    local nouns=()
    local noun_aliases=()

    __replicated_handle_word
}

if [[ $(type -t compopt) = "builtin" ]]; then
    complete -o default -F __start_replicated replicated
else
    complete -o default -o nospace -F __start_replicated replicated
fi

# ex: ts=4 sw=4 et filetype=sh
