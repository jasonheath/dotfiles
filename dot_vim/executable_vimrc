set nocompatible 
" actually run by default so could elide
" However, keep as the first line because VIVE LA VIM!

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" MANDATORY SETTINGS are for my sanity
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set autoindent
set autowrite
set autoread
set nobackup
set nowrap
set nowrapscan
set number
set ruler
set expandtab " has my attitude about tabs actually changed?
set smarttab
set shiftwidth=2
set tabstop=2
set smartindent
set visualbell

set guifont=Monaco:h14
colorscheme solarized

set encoding=utf8
set ffs=unix,dos,mac






"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" CREATURE FEATURES make life good
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set confirm
set mousehide
set ignorecase
set smartcase
set hlsearch
set incsearch
set magic
set lazyredraw
set showmatch
set report=0
set splitbelow
set splitright
set warn
set suffixes='.bak,~,.o,.info,.swp,.obj'
						 ".bak,~,.o,.h,.info,.swp,.obj <-- default




"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" AUTOCOMMANDS 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FocusLost * nested silent! :wa


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""   FILETYPE SETTINGS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax enable
filetype plugin on
filetype indent on 

" As Instructed at https://github.com/dense-analysis/ale#standard-installation
" Put these lines at the very end of your vimrc file.
" Load all plugins now.
" Plugins need to be added to runtimepath before helptags can be generated.
packloadall
" Load all of the helptags now, after plugins have been loaded.
" All messages and errors will be ignored.
silent! helptags ALL

" Automatically switch light/dark background + theme
"function! SetAppearance(...)
"  try
"    let s:mode = systemlist("")[0]
"    let s:new_bg = ""
"    let s:new_theme = ""
"    if s:mode ==? "Dark"
"      let s:new_bg = "dark"
"      let s:new_theme = "base16-unikitty-dark"
"    else
"      let s:new_bg = "light"
"      let s:new_theme = "base16-unikitty-light"
"    endif
"    if &background !=? s:new_bg
"      let &background = s:new_bg
"      execute 'colorscheme '.s:new_theme
"    endif
"  catch
"    " Ignore errors
"  endtry
"endfunction
"call SetAppearance()
"call timer_start(2000, "SetAppearance", {"repeat": -1})

" -=> Everything Below has been commented out <=- 


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" determine the operating system we are running on
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
":let OS = system('uname -s' )


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" set guifont based on the operating system
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
":if has('linux')
"  set guifont=Luxi\ Mono\ 14
":elseif has('linux')
"  set guifont=Monaco:h14
":endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Mappings that involving ctrl (so mapped to cmd on for Mac)
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" this seemed like a good idea but let's try living without it
" :if has('mac') 
" 	map <D-j> <C-W>j
" 	map <D-k> <C-W>k
" 	map <D-h> <C-W>h
" 	map <D-l> <C-W>l
" :else
" 	map <C-j> <C-W>j
" 	map <C-k> <C-W>k
" 	map <C-h> <C-W>h
" 	map <C-l> <C-W>l
" :endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Map the essential default key combinations that involving the ctrl key
"" to the command key on a Mac
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
":if has('mac') 
"  " maps window operations
"  map <D-w> <C-w>
"  " jump back in the tag stack
"  map <D-t> <C-t>
"  " jump to keyword definition
"  map <D-]> <C-]>
"  " Scroll window [count] pages Forwards (downwards)
"  map <D-f> <C-f>
"  " Scroll window [count] pages Backwards (upwards)
"  map <D-b> <C-b>
"  " search forward for the next matching keyword
"  imap <D-n> <C-n>
"  " search backwards for the next matching keyword
"  imap <D-p> <C-p>
"  " ins-completion mode
"  imap <D-x> <C-x>
"  " enter visual mode
"  imap <D-v> <C-v>
":end

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Function Key mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" F1
" RESERVED: Vim's default help.  Remap this and its less friendly 
" F2
"   map <F2> gUw " up case the current word 
"   map <D-F2> guw " low case the current word
" F3
" F4
" F5
" F6
"   map <F6> :set invnumber<CR> " toggle list on
" F7
"   map <F7> :set invlist<CR> " toggle list on
" F8
"   map <F8> :set invpaste<CR> " toggle paste mode on
" F9
" RESERVED: Mac Expose' All Windows
" F10
" RESERVED: Mac Curent Application Window
" F11
" RESERVED: Mac Show Desktop
" F12
" RESERVED: Mac Dashboard



