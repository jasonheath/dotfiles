# '.zshenv' is sourced on all invocations of the shell, unless the -f
# option is set. It should contain commands to set the command search 
# path, plus other important environment variables. '.zshenv' should not
# contain commands that produce output or assume the shell is attached
# to a tty.
#
# '.zshenv' is 1/4 files that are executed

export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='vim'
fi

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"


#---------------------------------------------------------------------
# PATH management
#---------------------------------------------------------------------
# This path mgmt is focused on adding things to the PATH that I've wanted to
# install so here we build up a hierarchical ordering of paths and then we
# append any preexisting PATH value to that so that our preferred executables
# are found prior to things on the path before we intereceded
{{- if eq .chezmoi.os "darwin" }}
x="$HOME/bin"
x="${x}:/usr/local/bin:/usr/local/sbin" # homebrew (https://brew.sh/)
x="${x}:/Applications/MacVim.app/Contents/bin"
x="${x}:/Applications/Visual Studio Code.app/Contents/Resources/app/bin"
if [[ -n $PATH ]]; then
  x="$x:$PATH"
fi
export PATH=$x
unset x
{{- else if eq .chezmoi.os "linux" }}

export HOMEBREW_CELLAR="/home/linuxbrew/.linuxbrew/Cellar"
export HOMEBREW_REPOSITORY="/home/linuxbrew/.linuxbrew/Homebrew"

export PATH_HOME_BIN="$HOME/bin"
export PATH_HOMEBREW="/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin"
export MANPATH_HOMEBREW="/home/linuxbrew/.linuxbrew/share/man"
export INFOPATH_HOMEBREW="/home/linuxbrew/.linuxbrew/share/info"

export PATH="${PATH_HOME_BIN}:${PATH_HOMEBREW}${PATH+:$PATH}"
export MANPATH="$MANPATH_HOMEBREW:${MANPATH+:$MANPATH}:"
export INFOPATH="$INFOPATH_HOMEBREW:${INFOPATH:-}"

{{- end }}

{{- /* personal laptop username is "jasonheath" */}}
{{- /* progress laptop username is "jaheath" */}}
{{- /* ubuntu parallels vm username is "jah" */}}
{{- /* windows parallels vm username is "jaheath" */}}

#---------------------------------------------------------------------
# Progress/Chef/Habitat ENV variables
# https://docs.chef.io/habitat/environment_variables/
#---------------------------------------------------------------------

export AWS_PROFILE=habitat

# REQUIRED
{{- if and (eq .chezmoi.username "jaheath") (lookPath "op") }}
export HAB_AUTH_TOKEN={{onepasswordRead "op://progress/HAB_AUTH_TOKEN/credential"}}
{{- else }}
export HAB_AUTH_TOKEN=FIXME # by installing 1password CLI
{{- end }}
#export HAB_ORIGIN=jasonheath
export HAB_ORIGIN=habitat

# UNDOCUMENTED?
#export HAB_BUTTERFLY_BINARY
#export HAB_LAUNCH_BINARY
#export HAB_STUDIO_BINARY
#export HAB_SUP_BINARY="/home/jah/Development/progress/habitat/target/debug/hab-sup" # NO DEFAULT?

#export FS_ROOT="$HOME/Development/progress/habroot/"
#   END: Progress/Chef/Habitat ENV variables

# To pass custom arguments to run the Supervisor, export 'HAB_STUDIO_SUP' with
# the arguments before running 'hab studio enter'.

# HABITAT environment variables supporting the habitat build
{{- if eq .chezmoi.os "darwin" }}

#---------------------------------------------------------------------
# LDFLAGS
#---------------------------------------------------------------------
x="-L/usr/local/opt/libpq/lib"
if [[ -n $LDFLAGS ]]; then
  x="$x:$LDFLAGS"
fi
export LDFLAGS=$x
unset x

#---------------------------------------------------------------------
# CPPFLAGS
#---------------------------------------------------------------------
x="-I/usr/local/opt/libpq/include"
if [[ -n $CPPFLAGS ]]; then
  cppflags="$x:$CPPFLAGS"
fi
export CPPFLAGS=$x
unset x

#---------------------------------------------------------------------
# PKG_CONFIG_PATH
#---------------------------------------------------------------------
x="/usr/local/opt/libarchive/lib/pkgconfig"
x="/usr/local/opt/libpq/lib/pkgconfig:${x}"
x="/usr/local/lib/pkgconfig:${x}"
if [[ -n $PKG_CONFIG_PATH ]]; then
  x="$x:$PKG_CONFIG_PATH"
fi
export PKG_CONFIG_PATH=$x
unset x

#---------------------------------------------------------------------
# MORE PATH
#---------------------------------------------------------------------
# This path mgmt is focused on adding to the PATH for compilation so it appends
# to the PATH set up above so that anything that we wanted to opt into (as
# opposed to need to) and anything the system put on the path precedes and has
# precedence over anything that compilation needs forced us into adding.
x="/usr/local/opt/libpq/bin" # libpq needed for habitat builder
if [[ -n $PATH ]]; then
  x="$PATH:$x"
fi
export PATH=$x
unset x

export LIBZMQ_INCLUDE_DIR="/usr/local/include"
export LIBZMQ_LIB_DIR="/usr/local/lib"
export PROTOC="/usr/local/bin/protoc"
export PROTOC_INCLUDE="/usr/local/include"

{{- else if eq .chezmoi.os "linux" }}
export LIBZMQ_INCLUDE_DIR="/usr/include"
export LIBZMQ_LIB_DIR="/usr/lib/x86_64-linux-gnu"
export PKG_CONFIG_PATH="/usr/lib/x86_64-linux-gnu/pkgconfig"
export PROTOC="/usr/bin/protoc"
export PROTOC_INCLUDE="/usr/include"
{{- end }}


#---------------------------------------------------------------------
# rust environment variables
#---------------------------------------------------------------------

export RA_LOG="error" # the logging level for rust analyzer
export RUST_BACKTRACE="0"
#export RUST_LOG="info,manager::file_watcher=trace"


#---------------------------------------------------------------------
# ruby environment variables 
#---------------------------------------------------------------------
if [[ -s $(whence brew) ]]; then
  # https://github.com/rbenv/ruby-build/wiki
  # For Ruby versions 2.xâ€“3.0:
  # export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1)"
  # Ruby 3.1 and above requires OpenSSL 3:
  export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@3)"
fi

#---------------------------------------------------------------------
# homebrew (https://brew.sh/)
#---------------------------------------------------------------------
if [[ -s $(whence brew) ]]; then
{{- if and (eq .chezmoi.os "darwin") (eq .chezmoi.arch "amd64") }}
export HOMEBREW_PREFIX="/usr/local"
{{- else if and (eq .chezmoi.os "darwin") (eq .chezmoi.arch "arm64") }}
export HOMEBREW_PREFIX="/opt/local"
{{- else if eq .chezmoi.os "linux" }}
export HOMEBREW_PREFIX="/home/linuxbrew/.linuxbrew"
{{- end }}
fi

